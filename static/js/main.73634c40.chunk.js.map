{"version":3,"sources":["component/Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","console","log","info","type","className","class","classname","annually","pay","list1","list2","list3","App","cardInfo","monthly","useState","toggled","toggle","name","id","onClick","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sPAGe,SAASA,EAAKC,GAE3B,OADAC,QAAQC,IAAIF,EAAMG,KAAKC,MAErB,yBAAKC,UAAWL,EAAMG,KAAKG,OACzB,4BAAKN,EAAMG,KAAKC,MAChB,2BACE,0BAAMG,UAAWP,EAAMG,KAAKK,UAA5B,IAAwCR,EAAMS,MAEhD,4BACE,4BAAKT,EAAMG,KAAKO,OAChB,4BAAKV,EAAMG,KAAKQ,OAChB,4BAAKX,EAAMG,KAAKS,QAElB,+CC+DSC,MA1Ef,WACE,IAAMC,EAAW,CACf,CACEV,KAAM,QACNE,MAAO,YACPS,QAAS,MACTP,SAAU,OACVE,MAAO,iBACPC,MAAO,kBACPC,MAAO,mBAET,CACER,KAAM,eACNE,MAAO,8BACPS,QAAS,MACTP,SAAU,OACVE,MAAO,eACPC,MAAO,kBACPC,MAAO,oBAET,CACER,KAAM,SACNE,MAAO,YACPS,QAAS,MACTP,SAAU,OACVE,MAAO,eACPC,MAAO,mBACPC,MAAO,qBA3BE,EA8BaI,oBAAS,GA9BtB,mBA8BNC,EA9BM,KA8BGC,EA9BH,KA+Bb,OACE,yBAAKb,UAAU,OACb,yBAAKA,UAAU,aACb,2CACA,yBAAKA,UAAU,oBACb,0CACA,8BACE,2BACED,KAAK,WACLe,KAAK,SACLC,GAAG,SACHC,QAAS,WACPH,GAAO,SAACD,GAAD,OAAcA,QAGzB,2BAAOK,QAAQ,UACb,yBAAKjB,UAAU,WAGnB,0CAGF,yBAAKA,UAAU,QACZY,GACC,oCACE,kBAAClB,EAAD,CAAMI,KAAMW,EAAS,GAAIL,IAAKK,EAAS,GAAGC,UAC1C,kBAAChB,EAAD,CAAMI,KAAMW,EAAS,GAAIL,IAAKK,EAAS,GAAGC,UAC1C,kBAAChB,EAAD,CAAMI,KAAMW,EAAS,GAAIL,IAAKK,EAAS,GAAGC,YAG5CE,GACA,oCACE,kBAAClB,EAAD,CAAMI,KAAMW,EAAS,GAAIL,IAAKK,EAAS,GAAGN,WAC1C,kBAACT,EAAD,CAAMI,KAAMW,EAAS,GAAIL,IAAKK,EAAS,GAAGN,WAC1C,kBAACT,EAAD,CAAMI,KAAMW,EAAS,GAAIL,IAAKK,EAAS,GAAGN,gBC1DpCe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.73634c40.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nexport default function Card(props) {\r\n  console.log(props.info.type);\r\n  return (\r\n    <div className={props.info.class}>\r\n      <h4>{props.info.type}</h4>\r\n      <p>\r\n        <span classname={props.info.annually}>${props.pay}</span>\r\n      </p>\r\n      <ul>\r\n        <li>{props.info.list1}</li>\r\n        <li>{props.info.list2}</li>\r\n        <li>{props.info.list3}</li>\r\n      </ul>\r\n      <button>Learn More</button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport Card from \"./component/Card\";\n\nfunction App() {\n  const cardInfo = [\n    {\n      type: \"Basic\",\n      class: \"price-box\",\n      monthly: 19.99,\n      annually: 199.99,\n      list1: \"500 GB Storage\",\n      list2: \"2 Users Allowed\",\n      list3: \"Send up to 3 GB\",\n    },\n    {\n      type: \"Professional\",\n      class: \"price-box price-box-premium\",\n      monthly: 24.99,\n      annually: 249.99,\n      list1: \"1 TB Storage\",\n      list2: \"5 Users Allowed\",\n      list3: \"Send up to 10 GB\",\n    },\n    {\n      type: \"Master\",\n      class: \"price-box\",\n      monthly: 39.99,\n      annually: 399.99,\n      list1: \"2 TB Storage\",\n      list2: \"10 Users Allowed\",\n      list3: \"Send up to 20 GB\",\n    },\n  ];\n  const [toggled, toggle] = useState(false);\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Our Pricing</h1>\n        <div className=\"toggle-container\">\n          <span>Annually</span>\n          <span>\n            <input\n              type=\"checkbox\"\n              name=\"toggle\"\n              id=\"toggle\"\n              onClick={() => {\n                toggle((toggled) => !toggled);\n              }}\n            />\n            <label htmlFor=\"toggle\">\n              <div className=\"ball\"></div>\n            </label>\n          </span>\n          <span>Monthly</span>\n        </div>\n\n        <div className=\"flex\">\n          {toggled && (\n            <>\n              <Card info={cardInfo[0]} pay={cardInfo[0].monthly} />\n              <Card info={cardInfo[1]} pay={cardInfo[1].monthly} />\n              <Card info={cardInfo[2]} pay={cardInfo[2].monthly} />\n            </>\n          )}\n          {!toggled && (\n            <>\n              <Card info={cardInfo[0]} pay={cardInfo[0].annually} />\n              <Card info={cardInfo[1]} pay={cardInfo[1].annually} />\n              <Card info={cardInfo[2]} pay={cardInfo[2].annually} />\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}